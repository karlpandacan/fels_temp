<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Auth;
use App\Http\Controllers\LearnedWordController;

class LessonWord extends Model
{
    protected $table = 'lesson_word';
    protected $fillable = ['lesson_id', 'word_id', 'word_answered_id'];

    public function word()
    {
        return $this->belongsTo(Word::class, 'word_id');
    }

    public function wordAnswered()
    {
        return $this->belongsTo(Word::class, 'word_answered_id');
    }

    public function lesson()
    {
        return $this->belongsTo(Lesson::class);
    }

    // This block is placed here to remove logic from the controller
    public function getCorrectAnswerCount($results)
    {
        $correctAnswers = 0;
        foreach($results as $result) {
            if($result->word_id == $result->word_answered_id) {
                $correctAnswers++;
            }
        }

        return (object) [
            'correct' => $correctAnswers,
            'total' => count($results)
        ];
    }

    public function generateLessonWords($request)
    {
        // Fetch the ids of learned words to be used in querying the words that have not been learned yet
        $learnedWords = Auth::user()->learnedWords()->lists('word_id');
        $lessonWords = Word::with(['category', 'lessonWords'])
            ->whereNotIn('id', $learnedWords)
            ->orderBy(\DB::raw('RAND()'))
            ->take(5)
            ->get();

        $lessonWordsToInsert = [];
        foreach ($lessonWords as $lessonWord) {
            $lessonWordsToInsert[] = [
                'lesson_id' => $request->lesson_id,
                'word_id' => $lessonWord->id,
                'word_answered_id' => null
            ];
        }

        try {
            \Eloquent::insert($lessonWordsToInsert);
            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

    public function setAnswer($request)
    {
        $this->update([
            'word_answered_id' => $request->input('word_answer_id')
        ]);

        // Now check if the words match
        if($this->word_id == $this->word_answered_id) {
            $request->request->add(['word_id' => $this->word_id]);
            $learnedWord = new LearnedWordController;
            $learnedWord->store($request); // Add word id to Learned Words
        }
    }

    /*
     * Returns the most recent lesson_id generated by the current user
     */
    public function getLastLessonId()
    {
        return Lesson::where('user_id', '=', Auth::id())->orderBy('created_at', 'desc')->first()->id;
    }
}
